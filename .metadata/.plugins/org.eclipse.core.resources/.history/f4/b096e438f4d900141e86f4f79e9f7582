 import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;

public class LCS {
 
	public static double similarity(String s1, String s2) {
	    String longer = s1, shorter = s2;
	    if (s1.length() < s2.length()) { // longer should always have greater length
	      longer = s2; shorter = s1;
	    }
	    int longerLength = longer.length();
	    if (longerLength == 0) { return 1.0; /* both strings are zero length */ }
	    /* // If you have StringUtils, you can use it to calculate the edit distance:
	    return (longerLength - StringUtils.getLevenshteinDistance(longer, shorter)) /
	                               (double) longerLength; */
	    return (longerLength - editDistance(longer, shorter)) / (double) longerLength;

	  }

	  // Example implementation of the Levenshtein Edit Distance
	  // See http://rosettacode.org/wiki/Levenshtein_distance#Java
	  public static int editDistance(String s1, String s2) {
	    s1 = s1.toLowerCase();
	    s2 = s2.toLowerCase();

	    int[] costs = new int[s2.length() + 1];
	    for (int i = 0; i <= s1.length(); i++) {
	      int lastValue = i;
	      for (int j = 0; j <= s2.length(); j++) {
	        if (i == 0)
	          costs[j] = j;
	        else {
	          if (j > 0) {
	            int newValue = costs[j - 1];
	            if (s1.charAt(i - 1) != s2.charAt(j - 1))
	              newValue = Math.min(Math.min(newValue, lastValue),
	                  costs[j]) + 1;
	            costs[j - 1] = lastValue;
	            lastValue = newValue;
	          }
	        }
	      }
	      if (i > 0)
	        costs[s2.length()] = lastValue;
	    }
	    return costs[s2.length()];
	  }
	  public static void printSimilarity(String s, String t) {
		    System.out.println(String.format(
		      "%.3f is the similarity between \"%s\" and \"%s\"", similarity(s, t), s, t));
		  }

        /** Main Function **/
        public static void main(String[] args) throws IOException
        {   
        	BufferedReader in = new BufferedReader(new FileReader("/media/enigmatus/C85ACC635ACC503C/Users/Kartik/Documents/BTP/BTP_data_main/acmmapmiscclear.txt"));
        	BufferedReader in2 = new BufferedReader(new FileReader("/media/enigmatus/C85ACC635ACC503C/Users/Kartik/Documents/BTP/BTP_data_main/Values2.txt"));
        	BufferedWriter out = new BufferedWriter(new FileWriter("/media/enigmatus/C85ACC635ACC503C/Users/Kartik/Documents/BTP/BTP_data_main/results_LCS1.txt"));
        	ArrayList<String> keyword = new ArrayList<String>();
        	ArrayList<String> categories = new ArrayList<String>();
            String line="";
            LCS obj = new LCS();
        	while((line=in.readLine())!=null){
        		line.replace("'", "");
        		categories.add(line);
        	}
        	while((line=in2.readLine())!=null){
        		line.replace("'", "");
        		keyword.add(line);
        	}
        	
        	String str1 = null,str2 = null;
        	Double result;
        	for(int i=0;i<categories.size();i++){
        		str1=categories.get(i);
        		for(int j=0;j<keyword.size();j++){
        			str2=keyword.get(j);
                    result = obj.similarity(str1, str2);
                    out.write(String.valueOf(result)+",");
        		}
        		out.newLine();
        	}
        	out.close();
        }
    }